<?php

function leaf_consignor_menu()
{
    $items = array();
    $items['vendor/autocomplete'] = array(
        'title' => 'Autocomplete for vendor',
        'page callback' => '_vendor_autocomplete',
        'access arguments' => array('access_leaf_consignor_content'), //or whatever permission makes sense
        'type' => MENU_CALLBACK
    );

    $items['consignor/add'] = array(
        'title' => 'Consignor Add',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('form_collection_consignor'),
        //'access callback' => TRUE,
        //'description' => 'A set of ten tutorials',
        'file' => 'leaf_consignor.inc',
        'type' => MENU_LOCAL_TASK,
        'access arguments' => array('access_leaf_consignor_content'),
    );

    $items['contract/add'] = array(
        'title' => 'New Contract',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('form_collection_contract'),
        // 'access callback' => TRUE,
        //'description' => 'A set of ten tutorials',
        'file' => 'leaf_consignor.inc',
        'type' => MENU_NORMAL_ITEM,
        'access arguments' => array('access_leaf_consignor_content'),
    );

    $items['contract/summary/%contract'] = array(
        'title' => 'Summary Contract / Vendor Report',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('contract_summary_form', 2),
        'access arguments' => array('access_leaf_consignor_content'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['vendor/%vendor/edit'] = array(
        'title' => 'Vendor Edit',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('vendor_edit_form', 1),
        'access arguments' => array('access_leaf_consignor_content'),
        'file' => 'leaf_consignor.inc',
        'type' => MENU_NORMAL_ITEM,
    );

    $items['vendor/updatedb'] = array(
        'title' => 'Summary Contract / Vendor Update',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('form_update_csv'),
        'access arguments' => array('access_leaf_consignor_content'),
        'file' => 'leaf_consignor_update_csv.inc',
        'type' => MENU_LOCAL_TASK,
    );

    $items['admin/config/system/leaf'] = array(
        'title' => 'Leaf Export/Import for Pos',
        'type' => MENU_NORMAL_ITEM,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('form_export_consignor_data'),
        'access arguments' => array('access_leaf_consignor_content'),
        'file' => 'leaf_consignor_export.inc',
    );

//    $items['admin/config/system/leaf/im'] = array(
//        'title' => 'Leaf Import',
//        'type' => MENU_LOCAL_TASK,
//        'page callback' => 'drupal_get_form',
//        'page arguments' => array('form_import_consignor_data'),
//        'access arguments' => array('access_leaf_consignor_content'),
//        'file' => 'leaf_consignor_export.inc',
//
//    );
    $items['vendor-detail/%ctools_js/%'] = array(
        'title' => 'The Happy Modal',
        'page arguments' => array(1, 2),
        'page callback' => 'vendor_detail_modal_page',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/config/system/leaf/export'] = array(
        'title' => 'Leaf Export',
        'weight' => '-2',
        'type' => MENU_DEFAULT_LOCAL_TASK,
    );

    return $items;
}

function vendor_detail_modal_page($js = NULL, $nid = NULL)
{
    if ($nid == NULL) {
        // You can customize the string below, or use a drupal_goto() to
        // send the user to a custom error page.
        return 'No node id was sent. Error.';
    }
    if ($js) {
        // Required includes for ctools to work:
        ctools_include('modal');
        ctools_include('ajax');
    }

    // Load the node obkect
    $vendor = vendor_load($nid);

    $contents = theme('vendor_detail_popup', ['vendor' => $vendor]);
    return ctools_modal_render($vendor['name'], $contents);
}

/**
 * inside happy.module
 * Implements hook_views_pre_render()
 */
function leaf_consignor_views_pre_render(&$views)
{

    // The View name I set up prior is "Happy Titles"
    if ($views->name == 'vendor_test') {

        // Include the CTools tools that we need.
        ctools_include('ajax');
        ctools_include('modal');
        // Add CTools' javascript to the page.
        ctools_modal_add_js();
        // Create our own javascript that will be used to theme a modal.
        $happy_style = array(
            'happy-modal-style' => array(
                'modalSize' => array(
                    'type' => 'fixed',
                    'width' => 600,
                    'height' => 440,
                    'addWidth' => 10,
                    'addHeight' => 10,
                    'contentRight' => 10,
                    'contentBottom' => 0,
                ),
                'modalOptions' => array(
                    'opacity' => .6,
                    //'background-color' => '#684C31',
                ),
                'animation' => 'fadeIn',
                //'modalTheme' => 'happy_modal',
                // Customize the AJAX throbber like so:
                // This function assumes the images are inside the module directory's "images"
                // directory:
                // ctools_image_path($image, $module = 'ctools', $dir = 'images')
                //'throbber' => theme('image', array('path' => ctools_image_path('ajax-loader.gif', 'happy'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
                //'closeImage' => theme('image', array('path' => ctools_image_path('modal-close.png', 'happy'), 'alt' => t('Close window'), 'title' => t('Close window'))),
            ),
        );
        // Add the settings array defined above to Drupal 7's JS settings:
        drupal_add_js($happy_style, 'setting');
        // The function below assumes the happy.js file resides in [module_dir]/js
        //ctools_add_js('leaf_consignor', 'vendor_detail_modal');
        // The function below assumes the happy.css file resides in [module_dir]/css
        //ctools_add_css('happy', 'happy');
    }
}


/**
 * autocomplete helper
 * $string = string for search
 */
function _vendor_autocomplete($string)
{
    $matches = array();
    $db_or = db_or();
    $db_or->condition('vendor_uuid', '%' . db_like($string) . '%', 'LIKE');
    $db_or->condition('name', '%' . db_like($string) . '%', 'LIKE');
    $result = db_select('leaf_vendor', 'c')
            ->fields('c', array('vendor_id', 'vendor_uuid', 'name'))
            ->condition($db_or)
            ->range(0, 15)
            ->execute();

    // save the query to matches
    foreach ($result as $row) {
        $matches['#' . check_plain($row->vendor_uuid) . ' - ' . $row->name] = '#' . check_plain($row->vendor_uuid) . ' - ' . $row->name;
    }

    // Return the result to the form in json
    drupal_json_output($matches);
}

/**
 * Implements hook_permission().
 */
function leaf_consignor_permission()
{
    return array(
        'access_leaf_consignor_content' => array(
            'title' => t('Access content for the Leaf Consignor'),
        )
    );
}

function leaf_consignor_cron()
{
    //before 5 days claim date
    processSendMailClaimDate();
    //today is claim date
    processSendMailClaimDate(FALSE);
}

function processSendMailClaimDate($today = TRUE)
{
    if ($today) {
        $timeBegin = strtotime(date('Y-m-d 00:00:00'));
        $timeEnd = strtotime(date('Y-m-d 23:59:59'));
    } else {
        $timeBegin = strtotime(date('Y-m-d 00:00:00')) + (5 * 24 * 60 * 60);
        $timeEnd = strtotime(date('Y-m-d 23:59:59')) + (5 * 24 * 60 * 60);
    }


    $contract = db_select('leaf_contract', 'v')
            ->fields('v')
            ->condition('v.close_date', $timeEnd, '<=')
            ->condition('v.close_date', $timeBegin, '>=');
    if ($today) {
        $contract->condition('v.send_claim', 0, '=');
    } else {
        $contract->condition('v.send_claim_5', 0, '=');
    }

    $contract = $contract->execute()
            ->fetchAllAssoc('contract_id');

    foreach ($contract as $v) {
        $v = json_decode(json_encode($v), true);
        $vendor = db_select('leaf_vendor', 'v')
                ->fields('v')
                ->condition('v.vendor_id', $v['vendor_id'], '=')
                ->execute()
                ->fetchAssoc();

        $payment = db_select('leaf_payment', 'p')
                ->fields('p')
                ->condition('p.id', $vendor['payment_id'], '=')
                ->execute()
                ->fetchAssoc();

        $vendor['payment_name'] = $payment['name'];
        $products = getProduct($v['contract_id']);
        $productsCount = getProduct($v['contract_id'], TRUE);
        $html = theme('contract_summary_mail', ['contract' => $v, 'vendor' => $vendor, 'products' => $products, 'productsCount' => $productsCount]);
        $xml_name = "contract-{$v['contract_uuid']}.pdf";
        $data = print_pdf_generate_html($html, ['title' => 'Summary contract', 'name' => 'greenestreet', 'url' => 'http://leaf.greenestreet.com/contract']);
        if (!is_dir('public://contract')) {
            mkdir("public://contract", 0777);
        }

        $file = file_save_data($data, 'public://contract/' . $xml_name);
        drupal_chmod($file->uri, 0777);
        $attachment = file_load($file->fid);

        $params = array(
            'subject' => 'Contract is going to expire',
            'headers' => array('Content-Type' => 'text/html'),
            'attachment' => $attachment
        );

        if ($today) {
            $params['body'] = theme('contract_claim_mail', ['contract' => $v, 'vendor' => $vendor]);
        } else {
            $params['body'] = theme('contract_claim_mail_5', ['contract' => $v, 'vendor' => $vendor]);
        }

        $module = 'leaf_consignor';
        $key = 'summary';
        $message = drupal_mail($module, $key, $vendor['email_address'], language_default(), $params);

        //update status send mail
        if ($today) {
            $update = ['send_claim' => 1];
        } else {
            $update = ['send_claim_5' => 1];
        }

        db_update('leaf_contract')
                ->fields($update)
                ->condition('contract_id', $v['contract_id'], '=')
                ->execute();
    }
}

/**
 * Implements hook_theme().
 *
 * Defines the theming capabilities provided by this module.
 */
function leaf_consignor_theme()
{
    return array(
        'contract_summary_form' => array(
            'render element' => 'form',
            'template' => 'theming-contract-summary-form',
        ),
        'contract_summary_mail' => array(
            'template' => 'theming-contract-summary-pdf',
            'variables' => array(
                'contract' => NULL,
                'vendor' => NULL,
                'products' => NULL,
            ),
        ),
        'contract_claim_mail_5' => array(
            'template' => 'theming-claim-date-5-day',
            'variables' => array(
                'contract' => NULL,
            ),
        ),
        'contract_claim_mail' => array(
            'template' => 'theming-claim-date',
            'variables' => array(
                'contract' => NULL,
                'vendor' => NULL,
            ),
        ),
        'vendor_detail_popup' => array(
            'template' => 'vendor-detail-popup',
            'variables' => array(
                'vendor' => NULL,
            ),
        ),
    );
}

function vendor_edit_form($form, &$form_state, $vendor)
{
    $form = form_new_vendor();

    $form['new_1422973868224']['#title'] = 'Edit Vendor';
    $form['new_1422973868224']['new_1422973901058']['#default_value'] = $vendor['name'];
    $form['new_1422973868224']['new_1422973944836']['#default_value'] = $vendor['address'];
    $form['new_1422973868224']['new_1422973972442']['#default_value'] = $vendor['city'];
    $form['new_1422973868224']['new_1422974065842']['#default_value'] = $vendor['state'];
    $form['new_1422973868224']['new_1422974068093']['#default_value'] = $vendor['zip'];
    $form['new_1422973868224']['new_1422974070252']['#default_value'] = $vendor['email_address'];
    $form['new_1422973868224']['new_1422974138424']['#default_value'] = $vendor['phone_number'];
    $form['new_1422973868224']['new_1422974164604']['#default_value'] = $vendor['alternate_phone_number'];
    $form['new_1422973868224']['new_1422974198240']['#default_value'] = $vendor['payment_id'];
    $form['new_1422973868224']['new_1422974198239'] = array(
        '#type' => 'hidden',
        '#value' => $vendor['vendor_id'],
    );


    $form['back'] = array(
        '#type' => 'submit',
        '#value' => t('Back'),
    );

    $form['reset'] = array(
        '#type' => 'submit',
        '#value' => t('Reset'),
    );

    $form['delete'] = array(
        '#type' => 'submit',
        '#value' => t('Delete Vendor'),
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
    );

    $form['create'] = array(
        '#type' => 'submit',
        '#value' => t('Save and Create new consignment contract'),
    );



    return $form;
}

function vendor_edit_form_submit($form, &$form_state)
{
    $v = $form_state['values'];

    if ($v['op'] == 'Save' || $v['op'] == 'Save and Create new consignment contract') {
        db_update('leaf_vendor')
                ->fields(array(
                    'name' => $v['new_1422973901058'],
                    'address' => $v['new_1422973944836'],
                    'city' => $v['new_1422973972442'],
                    'state' => $v['new_1422974065842'],
                    'zip' => $v['new_1422974068093'],
                    'email_address' => $v['new_1422974070252'],
                    'phone_number' => $v['new_1422974138424'],
                    'alternate_phone_number' => $v['new_1422974164604'],
                    'payment_id' => $v['new_1422974198240'],
                ))
                ->condition('vendor_id', $v['new_1422974198239'], '=')
                ->execute();

        if ($v['op'] == 'Save and Create new consignment contract') {
            drupal_goto('contract/' . $v['new_1422974198239']);
        }
    }

    if ($v['op'] == 'Delete Vendor') {
        db_update('leaf_vendor')
                ->fields(array(
                    'delete_flag' => 1,
                ))
                ->condition('vendor_id', $v['new_1422974198239'], '=')
                ->execute();

        drupal_goto('vendor/list');
    }

    if ($v['op'] == 'Back') {
        drupal_goto('vendor/list');
    }
}

function contract_summary_form($form, &$form_state, $contract)
{

    $products = getProduct($contract['contract_id']);

    $active = array(0 => t('As is'), 1 => t('Cash offer'));

    $form['emailconsignment'] = array(
        '#type' => 'radios',
        '#title' => t('Email Consignment '),
        '#default_value' => isset($form_state['input']['emailconsignment']) ? $form_state['input']['emailconsignment'] : 0,
        '#options' => $active,
        '#attributes' => ['class' => ['email_consignment_input']],
    );

    foreach ($products as $k => $v) {
        $form["cop-{$v->product_id}"] = array(
            '#weight' => $k,
            '#required' => '0',
            '#type' => 'textfield',
            '#size' => 7,
            '#default_value' => $v->cop,
        );
    }

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
    );

    $form['#contract'] = $contract;

    return $form;
}

function contract_summary_form_submit($form, &$form_state)
{
    foreach ($form_state['values'] as $k => $v) {
        $f = explode('-', $k);
        if ($f[0] == 'cop') {
            db_update('leaf_product')
                    ->fields(array(
                        'cop' => $v,
                    ))
                    ->condition('product_id', $f[1], '=')
                    ->execute();
        }
    }

    unset($form['emailconsignment']);
    unset($form['submit']);
    $form['email_type'] = $form_state['values']['emailconsignment'];
    $params = array(
        'body' => render($form),
        'subject' => 'GREENE STREET WEB CONTRACT #' . $form['#contract']['contract_uuid'],
        'headers' => array('Content-Type' => 'text/html'),
    );

    $vendor = vendor_load($form['#contract']['vendor_id']);
    $module = 'leaf_consignor';
    $key = 'summary';
    $message = drupal_mail($module, $key, $vendor['email_address'], language_default(), $params);
}

/**
 * Implements hook_mail().
 */
function leaf_consignor_mail($key, &$message, $params)
{
    $message['subject'] = $params['subject'];
    $message['body'] = $params['body'];

    // Add attachment when available.
    if (isset($params['attachment'])) {
        $message['params']['attachments'][] = $params['attachment'];
    }
}

function template_preprocess_contract_summary_form(&$variables)
{
    foreach (element_children($variables['form']) as $key) {
        if (isset($variables['form'][$key]['#type'])) {
            $type = $variables['form'][$key]['#type'];
            if ($type == 'hidden' || $type == 'token') {
                $text_form_hidden[] = drupal_render($variables['form'][$key]);
            }
        }
    }

    $variables['form']['hidden'] = implode($text_form_hidden);

    $variables['contract'] = $variables['form']['#contract'];

    $vendor = db_select('leaf_vendor', 'v')
            ->fields('v')
            ->condition('v.vendor_id', $variables['contract']['vendor_id'], '=')
            ->execute()
            ->fetchAssoc();

    $payment = db_select('leaf_payment', 'p')
            ->fields('p')
            ->condition('p.id', $vendor['payment_id'], '=')
            ->execute()
            ->fetchAssoc();

    $vendor['payment_name'] = $payment['name'];
    $variables['vendor'] = $vendor;
    $variables['products'] = getProduct($variables['contract']['contract_id']);
    $variables['productsCount'] = getProduct($variables['contract']['contract_id'], TRUE);
}

function contract_load($id)
{
    $contract = db_select('leaf_contract', 'c')
            ->fields('c')
            ->condition('c.contract_id', $id, '=')
            ->execute()
            ->fetchAssoc();

    return $contract;
}

function vendor_load($id)
{
    $vendor = db_select('leaf_vendor', 'v')
            ->fields('v')
            ->condition('v.vendor_id', $id, '=')
            ->execute()
            ->fetchAssoc();

    return $vendor;
}

function getProduct($contractId, $count = false)
{
    $query = db_select('leaf_product', 'p');
    $query->leftJoin('leaf_item_category', 'i', 'i.id = p.item_category_id');
    $query->leftJoin('leaf_color', 'c', 'c.id = p.color_id');
    $query->leftJoin('leaf_brand', 'b', 'b.brand_id = p.brand_id');
    $query->fields('p', ['product_id', 'sku', 'name', 'size', 'description', 'consignment_price', 'purchase_price', 'price', 'status', 'quantity', 'cop'])
            ->fields('i', ['name'])
            ->fields('c', ['name'])
            ->fields('b', ['brand_name'])
            ->condition('p.contract_id', $contractId, '=');
    if ($count) {
        return $query->countQuery()->execute()->fetchField();
        ;
    } else {
        return $query->execute();
    }
}

/**
 * Implements hook_views_api().
 */
function leaf_consignor_views_api()
{
    return array(
        'api' => 3,
        'path' => drupal_get_path('module', 'leaf_consignor'),
    );
}

function leaf_consignor_action_info()
{
    return array(
        'leaf_consignor_delete_action' => array(
            'type' => 'entity',
            'label' => t('Delete Contract'),
            'configurable' => FALSE,
            'pass rows' => TRUE, //this will ensure that the entire views row is passed as part of the context in your action callback.
            'triggers' => array('any'),
        ),
        'leaf_consignor_delete_vendor_action' => array(
            'type' => 'entity',
            'label' => t('Delete Vendor'),
            'configurable' => FALSE,
            'pass rows' => TRUE, //this will ensure that the entire views row is passed as part of the context in your action callback.
            'triggers' => array('any'),
        ),
        'leaf_consignor_export_contract_action' => array(
            'type' => 'entity',
            'label' => t('Export xls Contract'),
            'configurable' => FALSE,
            'pass rows' => TRUE, //this will ensure that the entire views row is passed as part of the context in your action callback.
            'triggers' => array('any'),
            'aggregate' => TRUE,
        ),
        'leaf_consignor_export_items_sold_action' => array(
            'type' => 'entity',
            'label' => t('Export xls items sold'),
            'configurable' => FALSE,
            'pass rows' => TRUE, //this will ensure that the entire views row is passed as part of the context in your action callback.
            'triggers' => array('any'),
            'aggregate' => TRUE,
        ),
    );
}

function leaf_consignor_export_items_sold_action($cmt, $context = array())
{
    module_load_include('inc', 'phpexcel');
    $headers = array();
    $options = [
        'template' => drupal_get_path('module', 'leaf_consignor') . '/templates/excel/contract_template.xls',
        'format' => 'xls',
        'ignore_headers' => TRUE,
    ];

    $path = 'public://xls/';
    if (!is_dir($path)) {
        mkdir($path, 0777);
    }

    $name = 'Contract_' . date('Ymd') . '.xls';

    $path .= $name;

    $library = libraries_load('PHPExcel');
    $xls_reader = PHPExcel_IOFactory::createReaderForFile($options['template']);

    $xls = $xls_reader->load($options['template']);
    $sheet = $xls->getActiveSheet();
    $startRow = 1;
    $sheet->setCellValueByColumnAndRow(0, $startRow, 'Contract ID');
    $sheet->setCellValueByColumnAndRow(1, $startRow, 'Vendor ID');
    $sheet->setCellValueByColumnAndRow(2, $startRow, 'Vendor Name');
    $sheet->setCellValueByColumnAndRow(3, $startRow, 'Start Date');
    $sheet->setCellValueByColumnAndRow(4, $startRow, 'To Date');
    $sheet->setCellValueByColumnAndRow(5, $startRow, 'Claim date');
    $sheet->setCellValueByColumnAndRow(6, $startRow, 'Revenue Sharing(%)');
    switch ($context['view_info']['display']) {
        case 'page_2':
            $sheet->setCellValueByColumnAndRow(7, $startRow, 'Total Payout');

            break;
        case 'page_3':
            $sheet->setCellValueByColumnAndRow(7, $startRow, 'Numbers of contract');

            break;
        case 'page_4':
            $sheet->setCellValueByColumnAndRow(7, $startRow, 'Numbers of product');

            break;
        case 'page_5':
            $sheet->setCellValueByColumnAndRow(7, $startRow, 'Total Price');

            break;
        case 'page_6':
            $sheet->setCellValueByColumnAndRow(7, $startRow, 'Total Payout');

            break;

        default:
            break;
    }

    $startRow = 2;

    foreach ($context['rows'] as $v) {
        $sheet->setCellValueByColumnAndRow(0, $startRow, $v->leaf_contract_contract_uuid);
        $sheet->setCellValueByColumnAndRow(1, $startRow, $v->leaf_vendor_leaf_contract_vendor_uuid);
        $sheet->setCellValueByColumnAndRow(2, $startRow, $v->leaf_vendor_leaf_contract_name);
        $sheet->setCellValueByColumnAndRow(3, $startRow, date("m-d-Y", $v->leaf_contract_from_date));
        $sheet->setCellValueByColumnAndRow(4, $startRow, date("m-d-Y", $v->leaf_contract_close_date));
        $sheet->setCellValueByColumnAndRow(5, $startRow, date("m-d-Y", $v->leaf_contract_claim_date));
        $sheet->setCellValueByColumnAndRow(6, $startRow, $v->leaf_contract_revenue_sharing);
        switch ($context['view_info']['display']) {
            case 'page_2':
                $sheet->setCellValueByColumnAndRow(7, $startRow, $v->leaf_contract_total_payout);

                break;
            case 'page_3':
                $sheet->setCellValueByColumnAndRow(7, $startRow, $v->leaf_vendor_leaf_contract_number_of_contract);

                break;
            case 'page_4':
                $sheet->setCellValueByColumnAndRow(7, $startRow, $v->leaf_contract_number_of_product);

                break;
            case 'page_5':
                $sheet->setCellValueByColumnAndRow(7, $startRow, $v->leaf_contract_total_price);

                break;
            case 'page_6':
                $sheet->setCellValueByColumnAndRow(7, $startRow, $v->leaf_contract_total_payout);

                break;
            default:
                break;
        }
        $startRow++;
    }

    $writer = new PHPExcel_Writer_Excel5($xls);
    $writer->save($path);

    $http_headers = array(
        'Content-Type' => 'text/csv',
        'Content-Disposition' => 'attachment; filename="' . $name . '"',
        'Content-Length' => filesize($path),
    );
    if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE')) {
        $http_headers['Cache-Control'] = 'must-revalidate, post-check=0, pre-check=0';
        $http_headers['Pragma'] = 'public';
    } else {
        $http_headers['Pragma'] = 'no-cache';
    }


    file_transfer($path, $http_headers);
}

function leaf_consignor_export_contract_action($cmt, $context = array())
{
    module_load_include('inc', 'phpexcel');
    $headers = array();
    $options = [
        'template' => drupal_get_path('module', 'leaf_consignor') . '/templates/excel/contract_template.xls',
        'format' => 'xls',
        'ignore_headers' => TRUE,
    ];

    $path = 'public://xls/';
    if (!is_dir($path)) {
        mkdir($path, 0777);
    }

    $name = 'Contract_' . date('Ymd') . '.xls';

    $path .= $name;

    $library = libraries_load('PHPExcel');
    $xls_reader = PHPExcel_IOFactory::createReaderForFile($options['template']);

    $xls = $xls_reader->load($options['template']);
    $sheet = $xls->getActiveSheet();
    $startRow = 1;
    $sheet->setCellValueByColumnAndRow(0, $startRow, 'Contract ID');
    $sheet->setCellValueByColumnAndRow(1, $startRow, 'Vendor ID');
    $sheet->setCellValueByColumnAndRow(2, $startRow, 'Vendor Name');
    $sheet->setCellValueByColumnAndRow(3, $startRow, 'Start Date');
    $sheet->setCellValueByColumnAndRow(4, $startRow, 'To Date');
    $sheet->setCellValueByColumnAndRow(5, $startRow, 'Claim date');
    $sheet->setCellValueByColumnAndRow(6, $startRow, 'Revenue Sharing(%)');
    switch ($context['view_info']['display']) {
        case 'page_2':
            $sheet->setCellValueByColumnAndRow(7, $startRow, 'Total Payout');

            break;
        case 'page_3':
            $sheet->setCellValueByColumnAndRow(7, $startRow, 'Numbers of contract');

            break;
        case 'page_4':
            $sheet->setCellValueByColumnAndRow(7, $startRow, 'Numbers of product');

            break;
        case 'page_5':
            $sheet->setCellValueByColumnAndRow(7, $startRow, 'Total Price');

            break;
        case 'page_6':
            $sheet->setCellValueByColumnAndRow(7, $startRow, 'Total Payout');

            break;

        default:
            break;
    }

    $startRow = 2;

    foreach ($context['rows'] as $v) {
        $sheet->setCellValueByColumnAndRow(0, $startRow, $v->leaf_contract_contract_uuid);
        $sheet->setCellValueByColumnAndRow(1, $startRow, $v->leaf_vendor_leaf_contract_vendor_uuid);
        $sheet->setCellValueByColumnAndRow(2, $startRow, $v->leaf_vendor_leaf_contract_name);
        $sheet->setCellValueByColumnAndRow(3, $startRow, date("m-d-Y", $v->leaf_contract_from_date));
        $sheet->setCellValueByColumnAndRow(4, $startRow, date("m-d-Y", $v->leaf_contract_close_date));
        $sheet->setCellValueByColumnAndRow(5, $startRow, date("m-d-Y", $v->leaf_contract_claim_date));
        $sheet->setCellValueByColumnAndRow(6, $startRow, $v->leaf_contract_revenue_sharing);
        switch ($context['view_info']['display']) {
            case 'page_2':
                $sheet->setCellValueByColumnAndRow(7, $startRow, $v->leaf_contract_total_payout);

                break;
            case 'page_3':
                $sheet->setCellValueByColumnAndRow(7, $startRow, $v->leaf_vendor_leaf_contract_number_of_contract);

                break;
            case 'page_4':
                $sheet->setCellValueByColumnAndRow(7, $startRow, $v->leaf_contract_number_of_product);

                break;
            case 'page_5':
                $sheet->setCellValueByColumnAndRow(7, $startRow, $v->leaf_contract_total_price);

                break;
            case 'page_6':
                $sheet->setCellValueByColumnAndRow(7, $startRow, $v->leaf_contract_total_payout);

                break;
            default:
                break;
        }
        $startRow++;
    }

    $writer = new PHPExcel_Writer_Excel5($xls);
    $writer->save($path);

    $http_headers = array(
        'Content-Type' => 'text/csv',
        'Content-Disposition' => 'attachment; filename="' . $name . '"',
        'Content-Length' => filesize($path),
    );
    if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE')) {
        $http_headers['Cache-Control'] = 'must-revalidate, post-check=0, pre-check=0';
        $http_headers['Pragma'] = 'public';
    } else {
        $http_headers['Pragma'] = 'no-cache';
    }


    file_transfer($path, $http_headers);
}

function leaf_consignor_delete_action($cmt, $context = array())
{
    db_update('leaf_contract')
            ->fields(array(
                'delete_flag' => 1,
            ))
            ->condition('contract_id', $cmt->contract_id, '=')
            ->execute();
}

function leaf_consignor_delete_vendor_action($cmt, $context = array())
{
    db_update('leaf_vendor')
            ->fields(array(
                'delete_flag' => 1,
            ))
            ->condition('vendor_id', $cmt->vendor_id, '=')
            ->execute();
}

function leaf_consignor_entity_info()
{
    return array(
        'leaf_contract' => array(
            'label' => 'Contract entity item',
            'base table' => 'leaf_contract',
            'load hook' => 'contract_load',
            'entity keys' => array(
                'id' => 'contract_id',
                'label' => 'Contract new entity item',
            ),
        ),
        'leaf_vendor' => array(
            'label' => 'Vendor entity item',
            'base table' => 'leaf_vendor',
            'load hook' => 'vendor_load',
            'entity keys' => array(
                'id' => 'vendor_id',
                'label' => 'Vendor new entity item',
            ),
        ),
    );
}

function leaf_consignor_views_bulk_operations_form_alter(&$form, &$form_state, $vbo)
{

    if ($form_state['step'] == 'views_bulk_operations_confirm_form' && in_array($vbo->view->base_table, ['leaf_vendor', 'leaf_contract'])) {
        $str = '';
        $countItem = 0;
        foreach ($vbo->view->result as $k => $row) {
            if ($vbo->view->base_table == 'leaf_vendor') {
                $v = $row->leaf_vendor_vendor_uuid;
            }

            if ($vbo->view->base_table == 'leaf_contract') {
                $v = $row->leaf_contract_contract_uuid;
            }

            if ($form_state['values']['views_bulk_operations'][$k] != 0) {
                $str .= '<li>#' . $v . '</li>';
                $countItem ++;
            }
        }

        $head = '<div class="item-list"><h3>You selected the following <strong>' . $countItem . ' items</strong>:</h3><ul>';

        $str = $head . $str . '</ul></div>';

        $form['description']['#markup'] = $str;
    }
}
